{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nexport default function useScript(props) {\n  _s();\n  // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n  const [status, setStatus] = useState(props.scriptSrc ? 'loading' : 'idle');\n  useEffect(() => {\n    // Allow falsy src value if waiting on other data needed for\n    // constructing the script URL passed to this hook.\n    if (!props.scriptSrc) {\n      setStatus('idle');\n      return;\n    }\n    console.log('usescript:' + status);\n    console.log('[useScript] Injecting script: ', props.scriptSrc);\n    const head = document.querySelector('head');\n    const script = document.createElement('script');\n    if (script) {\n      script.setAttribute('src', props.scriptSrc);\n      props.attributes.forEach(attr => {\n        script.setAttribute(attr.name, attr.value);\n      });\n      head === null || head === void 0 ? void 0 : head.appendChild(script);\n      // Store status in attribute on script\n      // This can be read by other instances of this hook\n      const setAttributeFromEvent = event => {\n        script.setAttribute('data-status', event.type === 'load' ? 'ready' : 'error');\n      };\n      script.addEventListener('load', setAttributeFromEvent);\n      script.addEventListener('error', setAttributeFromEvent);\n    } else {\n      // Grab existing script status from attribute and set to state.\n      //setStatus(script.getAttribute(\"data-status\"));\n    }\n    // Script event handler to update status in state\n    // Note: Even if the script already exists we still need to add\n    // event handlers to update the state for *this* hook instance.\n    const setStateFromEvent = event => {\n      setStatus(event.type === 'load' ? 'ready' : 'error');\n    };\n    // Add event listeners\n    script.addEventListener('load', setStateFromEvent);\n    script.addEventListener('error', setStateFromEvent);\n  }, [props.scriptSrc]);\n  return status;\n}\n_s(useScript, \"qAsoSozG13wD7BrzlOP1Nj2dQpA=\");","map":{"version":3,"names":["useEffect","useState","useScript","props","_s","status","setStatus","scriptSrc","console","log","head","document","querySelector","script","createElement","setAttribute","attributes","forEach","attr","name","value","appendChild","setAttributeFromEvent","event","type","addEventListener","setStateFromEvent"],"sources":["E:/2025/Padma/Zendesk/projects/with_React/Nice-Zendesk-Integration-main/src/useScript.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nexport default function useScript(props) {\r\n  // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\r\n  const [status, setStatus] = useState(props.scriptSrc ? 'loading' : 'idle');\r\n  useEffect(() => {\r\n    // Allow falsy src value if waiting on other data needed for\r\n    // constructing the script URL passed to this hook.\r\n    if (!props.scriptSrc) {\r\n      setStatus('idle');\r\n      return;\r\n    }\r\n    console.log('usescript:' + status);\r\n    console.log('[useScript] Injecting script: ', props.scriptSrc);\r\n    const head = document.querySelector('head');\r\n    const script = document.createElement('script');\r\n    if (script) {\r\n      script.setAttribute('src', props.scriptSrc);\r\n      props.attributes.forEach((attr) => {\r\n        script.setAttribute(attr.name, attr.value);\r\n      });\r\n      head?.appendChild(script);\r\n      // Store status in attribute on script\r\n      // This can be read by other instances of this hook\r\n      const setAttributeFromEvent = (event) => {\r\n        script.setAttribute(\r\n          'data-status',\r\n          event.type === 'load' ? 'ready' : 'error'\r\n        );\r\n      };\r\n      script.addEventListener('load', setAttributeFromEvent);\r\n      script.addEventListener('error', setAttributeFromEvent);\r\n    } else {\r\n      // Grab existing script status from attribute and set to state.\r\n      //setStatus(script.getAttribute(\"data-status\"));\r\n    }\r\n    // Script event handler to update status in state\r\n    // Note: Even if the script already exists we still need to add\r\n    // event handlers to update the state for *this* hook instance.\r\n    const setStateFromEvent = (event) => {\r\n      setStatus(event.type === 'load' ? 'ready' : 'error');\r\n    };\r\n    // Add event listeners\r\n    script.addEventListener('load', setStateFromEvent);\r\n    script.addEventListener('error', setStateFromEvent);\r\n  }, [props.scriptSrc]);\r\n  return status;\r\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvC;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAACE,KAAK,CAACI,SAAS,GAAG,SAAS,GAAG,MAAM,CAAC;EAC1EP,SAAS,CAAC,MAAM;IACd;IACA;IACA,IAAI,CAACG,KAAK,CAACI,SAAS,EAAE;MACpBD,SAAS,CAAC,MAAM,CAAC;MACjB;IACF;IACAE,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGJ,MAAM,CAAC;IAClCG,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEN,KAAK,CAACI,SAAS,CAAC;IAC9D,MAAMG,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAC3C,MAAMC,MAAM,GAAGF,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC;IAC/C,IAAID,MAAM,EAAE;MACVA,MAAM,CAACE,YAAY,CAAC,KAAK,EAAEZ,KAAK,CAACI,SAAS,CAAC;MAC3CJ,KAAK,CAACa,UAAU,CAACC,OAAO,CAAEC,IAAI,IAAK;QACjCL,MAAM,CAACE,YAAY,CAACG,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,KAAK,CAAC;MAC5C,CAAC,CAAC;MACFV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,WAAW,CAACR,MAAM,CAAC;MACzB;MACA;MACA,MAAMS,qBAAqB,GAAIC,KAAK,IAAK;QACvCV,MAAM,CAACE,YAAY,CACjB,aAAa,EACbQ,KAAK,CAACC,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,OAAO,CAC1C;MACH,CAAC;MACDX,MAAM,CAACY,gBAAgB,CAAC,MAAM,EAAEH,qBAAqB,CAAC;MACtDT,MAAM,CAACY,gBAAgB,CAAC,OAAO,EAAEH,qBAAqB,CAAC;IACzD,CAAC,MAAM;MACL;MACA;IAAA;IAEF;IACA;IACA;IACA,MAAMI,iBAAiB,GAAIH,KAAK,IAAK;MACnCjB,SAAS,CAACiB,KAAK,CAACC,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,OAAO,CAAC;IACtD,CAAC;IACD;IACAX,MAAM,CAACY,gBAAgB,CAAC,MAAM,EAAEC,iBAAiB,CAAC;IAClDb,MAAM,CAACY,gBAAgB,CAAC,OAAO,EAAEC,iBAAiB,CAAC;EACrD,CAAC,EAAE,CAACvB,KAAK,CAACI,SAAS,CAAC,CAAC;EACrB,OAAOF,MAAM;AACf;AAACD,EAAA,CA7CuBF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}